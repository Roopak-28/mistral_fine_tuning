name: Convert CSV to Mistral JSONL
description: Converts a QnA CSV (with columns "question" and "answer" or "answers") to a JSONL file in Mistral instruction format for LLM fine-tuning.

inputs:
  - { name: csv_path, type: String, description: "Path to QnA CSV file" }
  - {
      name: output_jsonl,
      type: String,
      description: "Output path for Mistral-format JSONL file",
    }
  - {
      name: question_column,
      type: String,
      description: "Name of question column in CSV",
      default: "question",
    }
  - {
      name: answer_column,
      type: String,
      description: "Name of answer column in CSV",
      default: "answer",
    }

outputs:
  - {
      name: mistral_jsonl,
      type: Path,
      description: "Path to generated Mistral-format JSONL",
    }

implementation:
  container:
    image: python:3.10
    command:
      - python3
      - -u
      - -c
      - |
        import argparse
        import pandas as pd
        import json
        import os

        parser = argparse.ArgumentParser()
        parser.add_argument("--csv_path", type=str, required=True)
        parser.add_argument("--output_jsonl", type=str, required=True)
        parser.add_argument("--question_column", type=str, required=True)
        parser.add_argument("--answer_column", type=str, required=True)
        args = parser.parse_args()

        df = pd.read_csv(args.csv_path)
        if not args.question_column in df.columns:
            raise ValueError(f"Question column '{args.question_column}' not found in CSV!")
        if not args.answer_column in df.columns:
            raise ValueError(f"Answer column '{args.answer_column}' not found in CSV!")

        # Try to handle SQuAD-like 'answers' list columns if needed
        def get_answer(row):
            val = row[args.answer_column]
            if isinstance(val, str):
                if val.startswith("[") and val.endswith("]"):  # JSON list string
                    try:
                        aslist = json.loads(val)
                        return aslist[0] if aslist else ""
                    except:
                        return val
                else:
                    return val
            elif isinstance(val, list):
                return val[0] if val else ""
            else:
                return str(val)

        with open(args.output_jsonl, "w", encoding="utf-8") as f:
            for _, row in df.iterrows():
                q = str(row[args.question_column])
                a = get_answer(row)
                data = {"text": f"<s>[INST] {q} [/INST] {a}</s>"}
                f.write(json.dumps(data, ensure_ascii=False) + "\n")
        print(f"Saved Mistral-formatted JSONL to {args.output_jsonl}")

    args:
      - --csv_path
      - { inputValue: csv_path }
      - --output_jsonl
      - { outputPath: mistral_jsonl }
      - --question_column
      - { inputValue: question_column }
      - --answer_column
      - { inputValue: answer_column }
