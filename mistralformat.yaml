name: Convert CSV to Mistral JSONL
description: Converts a QnA CSV (with columns "question" and "answer" or "answers") to a JSONL file in Mistral instruction format for LLM fine-tuning.

inputs:
  - { name: csvpth, type: Path }
  - { name: question_column, type: String }
  - { name: answer_column, type: String }

outputs:
  - { name: mistral_jsonl, type: Path }

implementation:
  container:
    image: python:3.10
    command:
      - python3
      - -u
      - -c
      - |
        import argparse
        import pandas as pd
        import json

        parser = argparse.ArgumentParser()
        parser.add_argument("--csvpth", type=str, required=True)
        parser.add_argument("--mistral_jsonl", type=str, required=True)
        parser.add_argument("--question_column", type=str, required=True)
        parser.add_argument("--answer_column", type=str, required=True)
        args = parser.parse_args()

        df = pd.read_csv(args.csvpth)
        if args.question_column not in df.columns:
            raise ValueError(f"Question column '{args.question_column}' not found in CSV!")
        if args.answer_column not in df.columns:
            raise ValueError(f"Answer column '{args.answer_column}' not found in CSV!")

        def get_answer(row):
            val = row[args.answer_column]
            if isinstance(val, str):
                if val.startswith("[") and val.endswith("]"):
                    try:
                        aslist = json.loads(val)
                        return aslist[0] if aslist else ""
                    except:
                        return val
                else:
                    return val
            elif isinstance(val, list):
                return val[0] if val else ""
            else:
                return str(val)

        with open(args.mistral_jsonl, "w", encoding="utf-8") as f:
            for _, row in df.iterrows():
                q = str(row[args.question_column])
                a = get_answer(row)
                data = {"text": f"<s>[INST] {q} [/INST] {a}</s>"}
                f.write(json.dumps(data, ensure_ascii=False) + "\n")
    args:
      - --csvpth
      - { inputPath: csvpth }
      - --mistral_jsonl
      - { outputPath: mistral_jsonl }
      - --question_column
      - { inputValue: question_column }
      - --answer_column
      - { inputValue: answer_column }
